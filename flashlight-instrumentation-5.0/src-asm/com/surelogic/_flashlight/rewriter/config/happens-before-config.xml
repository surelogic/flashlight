<?xml version='1.0' encoding='UTF-8' standalone='yes'?>

<happens-before>
  <thread type="java.lang.Thread">
    <method decl="start()" hb="from" />
    <method decl="join()" hb="to" />
  </thread>

  <object type="java.lang.Object">
    <method decl="wait(long)" hb="target" />
    <method decl="wait(long,int)" hb="target" />
    <method decl="notify()" hb="source" />
  </object>

  <object type="java.util.concurrent.CyclicBarrier">
    <method decl="await()" hb="source-and-target" />
    <method decl="await(long, java.util.concurrent.TimeUnit)" hb="source-and-target" />
  </object>

  <object type="java.util.concurrent.CountDownLatch">
    <method decl="countDown()" hb="source" />
    <method decl="await()" hb="target" />
    <method decl="await(long, java.util.concurrent.TimeUnit)" hb="target" resultMustBe="true"/>
  </object>

  <object type="java.util.concurrent.Exchanger">
    <method decl="exchange(java.lang.Object)" hb="source-and-target" />
    <method decl="exchange(java.lang.Object, long, java.util.concurrent.TimeUnit)" hb="source-and-target" />
  </object>

  <object type="java.util.concurrent.Semaphore">
    <method decl="acquire()" hb="target" />
    <method decl="acquireUninterruptibly()" hb="target" />
    <method decl="acquire(int)" hb="target" />
    <method decl="acquireUninterruptibly(int)" hb="target" />
    <method decl="tryAcquire()" hb="target" resultMustBe="true" />
    <method decl="tryAcquire(long,java.util.concurrent.TimeUnit)" hb="target" resultMustBe="true" />
    <method decl="release()" hb="source" />
  </object>

  <!-- Atomics -->

  <object type="java.util.concurrent.atomic.AtomicBoolean">
    <method decl="compareAndSet(boolean,boolean)" hb="source-and-target"/>
    <method decl="get()" hb="target" />
    <method decl="getAndSet(boolean)" hb="source-and-target" />
    <method decl="set(boolean)" hb="source" />
  </object>

  <object type="java.util.concurrent.atomic.AtomicInteger">
    <method decl="compareAndSet(int,int)" hb="source-and-target"/>
    <method decl="get()" hb="target" />
    <method decl="getAndSet(int)" hb="source-and-target" />
    <method decl="set(int)" hb="source" />
    <method decl="addAndGet(int)" hb="source-and-target" />
    <method decl="decrementAndGet()" hb="source-and-target" />
    <method decl="getAndAdd(int)" hb="source-and-target" />
    <method decl="getAndIncrement()" hb="source-and-target" />
    <method decl="getAndDecrement()" hb="source-and-target" />
    <method decl="incrementAndGet()" hb="source-and-target" />
    <method decl="intValue()" hb="target" />
    <method decl="longValue()" hb="target" />
    <method decl="floatValue()" hb="target" />
    <method decl="doubleValue()" hb="target" />
  </object>

  <object type="java.util.concurrent.atomic.AtomicIntegerArray">
    <method decl="compareAndSet(int,int,int)" hb="source-and-target"/>
    <method decl="get(int)" hb="target" />
    <method decl="getAndSet(int,int)" hb="source-and-target" />
    <method decl="set(int,int)" hb="source" />
    <method decl="addAndGet(int,int)" hb="source-and-target" />
    <method decl="decrementAndGet(int)" hb="source-and-target" />
    <method decl="getAndIncrement(int)" hb="source-and-target" />
    <method decl="getAndDecrement(int)" hb="source-and-target" />
    <method decl="getAndAdd(int,int)" hb="source-and-target" />
    <method decl="incrementAndGet(int)" hb="source-and-target" />
  </object>

  <object type="java.util.concurrent.atomic.AtomicLong">
    <method decl="compareAndSet(long,long)" hb="source-and-target"/>
    <method decl="get()" hb="target" />
    <method decl="getAndSet(long)" hb="source-and-target" />
    <method decl="set(long)" hb="source" />
    <method decl="addAndGet(long)" hb="source-and-target" />
    <method decl="decrementAndGet()" hb="source-and-target" />
    <method decl="getAndAdd(long)" hb="source-and-target" />
    <method decl="getAndIncrement()" hb="source-and-target" />
    <method decl="getAndDecrement()" hb="source-and-target" />
    <method decl="incrementAndGet()" hb="source-and-target" />
    <method decl="intValue()" hb="target" />
    <method decl="longValue()" hb="target" />
    <method decl="floatValue()" hb="target" />
    <method decl="doubleValue()" hb="target" />
  </object>

  <object type="java.util.concurrent.atomic.AtomicLongArray">
    <method decl="compareAndSet(int,long,long)" hb="source-and-target"/>
    <method decl="get(int)" hb="target" />
    <method decl="getAndSet(int,long)" hb="source-and-target" />
    <method decl="set(int,long)" hb="source" />
    <method decl="addAndGet(int,long)" hb="source-and-target" />
    <method decl="decrementAndGet(int)" hb="source-and-target" />
    <method decl="getAndIncrement(int)" hb="source-and-target" />
    <method decl="getAndDecrement(int)" hb="source-and-target" />
    <method decl="getAndAdd(int,long)" hb="source-and-target" />
    <method decl="incrementAndGet(int)" hb="source-and-target" />
  </object>

  <object type="java.util.concurrent.atomic.AtomicMarkableReference">
    <method decl="compareAndSet(java.lang.Object, java.lang.Object, boolean, boolean)" hb="source-and-target"/>
    <method decl="attemptMark(java.lang.Object, boolean)" hb="source-and-target" />
    <method decl="get(boolean[])" hb="target" />
    <method decl="isMarked()" hb="target" />
    <method decl="set(java.lang.Object, boolean)" hb="source" />
  </object>

  <object type="java.util.concurrent.atomic.AtomicReference">
    <method decl="compareAndSet(java.lang.Object,java.lang.Object)" hb="source-and-target"/>
    <method decl="get()" hb="target" />
    <method decl="getAndSet(java.lang.Object)" hb="source-and-target" />
    <method decl="set(java.lang.Object)" hb="source" />
  </object>

  <object type="java.util.concurrent.atomic.AtomicReferenceArray">
    <method decl="compareAndSet(int,java.lang.Object,java.lang.Object)" hb="source-and-target"/>
    <method decl="get(int)" hb="target" />
    <method decl="getAndSet(int,java.lang.Object)" hb="source-and-target" />
    <method decl="set(int,java.lang.Object)" hb="source" />
  </object>

  <object type="java.util.concurrent.atomic.AtomicStampedReference">
    <method decl="attemptStamp(java.lang.Object,int)" hb="source-and-target" />
    <method decl="compareAndSet(java.lang.Object,java.lang.Object,int,int)" hb="source-and-target"/>
    <method decl="get(int[])" hb="target" />
    <method decl="getStamp()" hb="target" />
    <method decl="set(java.lang.Object,int)" hb="source" />
  </object>


  <!-- Concurrent Collections --> 

  <collection type="java.util.concurrent.ArrayBlockingQueue">
    <method decl="add(java.lang.Object)" hb="source" argNum="1"/>
    <method decl="put(java.lang.Object)" hb="source" argNum="1"/>
    <method decl="offer(java.lang.Object)" hb="source" argNum="1" resultMustBe="true" />
    <method decl="offer(java.lang.Object,long,java.util.concurrent.TimeUnit)" hb="source" argNum="1" resultMustBe="true"/>
    <method decl="take()" argNum="0" hb="target" />
    <method decl="poll(long,java.util.concurrent.TimeUnit)" argNum="0" hb="target"/>
    <method decl="remove(java.lang.Object)" hb="target" argNum="1" resultMustBe="true"/>
    <method decl="contains(java.lang.Object)" hb="target" argNum="1" resultMustBe="true"/>
    <!-- TODO
    <method decl="drainTo()" hb="target" />
    -->
  </collection>
  



</happens-before>
